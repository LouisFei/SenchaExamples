/*
 * File: app/view/Sales.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PivotGridExample.view.Sales', {
    extend: 'Ext.pivot.Grid',
    alias: 'widget.sales',

    requires: [
        'PivotGridExample.view.SalesViewModel',
        'PivotGridExample.view.SalesViewController',
        'Ext.pivot.matrix.Local',
        'Ext.pivot.dimension.Item',
        'Ext.grid.selection.SpreadsheetModel',
        'Ext.pivot.plugin.Configurator'
    ],

    controller: 'sales',
    viewModel: {
        type: 'sales'
    },
    height: 349,
    width: 750,
    collapsible: true,
    header: {
        itemPosition: 1,
        // after title before collapse tool
        items: [
            {
                ui: 'default-toolbar',
                xtype: 'button',
                text: 'Dock',
                menu: {
                    defaults: {
                        xtype: 'menucheckitem',
                        group: 'docking',
                        checkHandler: 'changeDock'
                    },
                    items: [
                        {
                            text: 'Top'
                        },
                        {
                            text: 'Right',
                            checked: true
                        },
                        {
                            text: 'Bottom'
                        },
                        {
                            text: 'Left'
                        }
                    ]
                }
            }
        ]
    },
    title: 'Pivot Grid with Configurator plugin',
    defaultListenerScope: true,

    matrix: {
        store: 'Sales',
        aggregate: {
            aggregator: 'avg',
            dataIndex: 'value',
            header: 'Value'
        },
        leftAxis: [
            {
                dataIndex: 'person',
                header: 'Person'
            },
            {
                dataIndex: 'company',
                header: 'Company',
                sortable: false
            }
        ],
        topAxis: [
            {
                labelRenderer: function(value) {
                    return "Year " + value;
                },
                dataIndex: 'year',
                header: 'Year'
            }
        ]
    },
    selModel: {
        selType: 'spreadsheet'
    },
    plugins: [
        {
            ptype: 'pivotconfigurator',
            pluginId: 'configurator',
            id: 'configurator',
            fields: [
                {
                    dataIndex: 'quantity',
                    header: 'Qty',
                    // You can even provide a default aggregator function to be used when this field is dropped
                    // on the agg dimensions
                    aggregator: 'min',
                    formatter: 'number("0")',
                    settings: {
                        // Define here in which areas this field could be used
                        allowed: [
                            'aggregate'
                        ],
                        // Set a custom style for this field to inform the user that it can be dragged only to "Values"
                        style: {
                            fontWeight: 'bold'
                        },
                        // Define here custom formatters that ca be used on this dimension
                        formatters: {
                            '0': 'number("0")',
                            '0%': 'number("0%")'
                        }
                    }
                },
                {
                    dataIndex: 'value',
                    header: 'Value',
                    settings: {
                        // Define here in which areas this field could be used
                        allowed: 'aggregate',
                        // Define here what aggregator functions can be used when this field is
                        // used as an aggregate dimension
                        aggregators: [
                            'sum',
                            'avg',
                            'count'
                        ],
                        // Set a custom style for this field to inform the user that it can be dragged only to "Values"
                        style: {
                            fontWeight: 'bold'
                        },
                        // Define here custom renderers that can be used on this dimension
                        renderers: {
                            'Colored 0,000.00': 'coloredRenderer'
                        },
                        // Define here custom formatters that ca be used on this dimension
                        formatters: {
                            '0': 'number("0")',
                            '0.00': 'number("0.00")',
                            '0,000.00': 'number("0,000.00")',
                            '0%': 'number("0%")',
                            '0.00%': 'number("0.00%")'
                        }
                    }
                },
                {
                    dataIndex: 'company',
                    header: 'Company',
                    settings: {
                        // Define here what aggregator functions can be used when this field is
                        // used as an aggregate dimension
                        aggregators: [
                            'count'
                        ]
                    }
                },
                {
                    dataIndex: 'country',
                    header: 'Country',
                    settings: {
                        // Define here what aggregator functions can be used when this field is
                        // used as an aggregate dimension
                        aggregators: [
                            'count'
                        ]
                    }
                },
                {
                    dataIndex: 'person',
                    header: 'Person',
                    settings: {
                        // Define here what aggregator functions can be used when this field is
                        // used as an aggregate dimension
                        aggregators: 'count'
                    }
                },
                {
                    dataIndex: 'year',
                    header: 'Year',
                    settings: {
                        // Define here the areas in which this field is fixed and cannot be moved from
                        fixed: [
                            'topAxis'
                        ]
                    }
                },
                {
                    dataIndex: 'month',
                    header: 'Month',
                    labelRenderer: 'monthLabelRenderer',
                    settings: {
                        // Define here what aggregator functions can be used when this field is
                        // used as an aggregate dimension
                        aggregators: [
                            'count'
                        ],
                        // Define here in which areas this field could be used
                        allowed: [
                            'leftAxis',
                            'topAxis'
                        ]
                    }
                }
            ]
        }
    ],
    listeners: {
        beforeshowconfigfieldmenu: 'getCustomMenus'
    },

    getCustomMenus: function(panel, options) {
        options.menu.add({
            text: 'Custom menu item',
            handler: function(){
                Ext.Msg.alert('Custom menu item', Ext.String.format('Do something for "{0}"', options.field.getHeader()));
            }
        });
    },

    changeDock: function(button, checked) {
        if(checked) {
            this.getPlugin('configurator').setDock(button.text.toLowerCase());
        }
    }

});